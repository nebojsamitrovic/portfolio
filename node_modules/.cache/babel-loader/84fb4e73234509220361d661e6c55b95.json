{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'lodash.camelcase', 'string-similarity'], factory);else if ('undefined' != typeof exports) factory(exports, require('lodash.camelcase'), require('string-similarity'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.lodash, global.stringSimilarity), global.utils = mod.exports;\n  }\n})(this, function (exports, _lodash, _stringSimilarity) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n\n    return Array.from(arr);\n  }\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  });\n\n  var _lodash2 = _interopRequireDefault(_lodash),\n      _stringSimilarity2 = _interopRequireDefault(_stringSimilarity),\n      _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  };\n\n  exports.default = {\n    handleType: function handleType(value) {\n      var type = value;\n      return 'function' != typeof value && (type = value.constructor), type === String ? ['[value]'] : type === Array ? ['<list>'] : type === Number || type === parseInt ? ['<n>', parseInt] : [''];\n    },\n    readOption: function readOption(option) {\n      var value = option.defaultValue,\n          contents = {},\n          _iteratorNormalCompletion = !0,\n          _didIteratorError = !1,\n          _iteratorError = void 0;\n\n      try {\n        for (var _step, _iterator = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n          var name = _step.value,\n              fromArgs = this.raw[name];\n          'undefined' != typeof fromArgs && (value = fromArgs);\n        }\n      } catch (err) {\n        _didIteratorError = !0, _iteratorError = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n        } finally {\n          if (_didIteratorError) throw _iteratorError;\n        }\n      }\n\n      var count = -1,\n          _iteratorNormalCompletion2 = !0,\n          _didIteratorError2 = !1,\n          _iteratorError2 = void 0;\n\n      try {\n        for (var _step2, _name, _iterator2 = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {\n          _name = _step2.value, count += 1;\n          var propVal = value;\n          Array.isArray(option.defaultValue) && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = [propVal]), 'undefined' != typeof option.defaultValue && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = option.defaultValue);\n          var condition = !0;\n          option.init && (option.init === toString && (condition = propVal.constructor === Number), condition && (propVal = option.init(propVal))), 1 < _name.length && (_name = (0, _lodash2.default)(_name)), contents[_name] = propVal;\n        }\n      } catch (err) {\n        _didIteratorError2 = !0, _iteratorError2 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion2 && _iterator2.return && _iterator2.return();\n        } finally {\n          if (_didIteratorError2) throw _iteratorError2;\n        }\n      }\n\n      return contents;\n    },\n    getOptions: function getOptions(definedSubcommand) {\n      var _this = this,\n          options = {},\n          args = {},\n          _iteratorNormalCompletion3 = !0,\n          _didIteratorError3 = !1,\n          _iteratorError3 = void 0;\n\n      try {\n        for (var _step3, _option, _iterator3 = this.details.options[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = !0) {\n          (_option = _step3.value, 'undefined' != typeof _option.defaultValue) && Object.assign(options, this.readOption(_option));\n        }\n      } catch (err) {\n        _didIteratorError3 = !0, _iteratorError3 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion3 && _iterator3.return && _iterator3.return();\n        } finally {\n          if (_didIteratorError3) throw _iteratorError3;\n        }\n      }\n\n      Object.assign(args, this.raw);\n\n      var _ = [].concat(_toConsumableArray(args._));\n\n      for (var option in delete args._, args) {\n        if ({}.hasOwnProperty.call(args, option)) {\n          var related = this.isDefined(option, 'options');\n\n          if (related) {\n            var details = this.readOption(related);\n            Object.assign(options, details);\n          }\n\n          related || definedSubcommand || function () {\n            var availableOptions = [];\n\n            _this.details.options.forEach(function (opt) {\n              availableOptions.push.apply(availableOptions, _toConsumableArray(opt.usage));\n            });\n\n            var suggestOption = _stringSimilarity2.default.findBestMatch(option, availableOptions);\n\n            if (console.log('The option \"' + option + '\" is unknown.'), 0.5 <= suggestOption.bestMatch.rating) {\n              console.log(' Did you mean the following one?\\n');\n\n              var suggestion = _this.details.options.filter(function (item) {\n                var _iteratorNormalCompletion4 = !0,\n                    _didIteratorError4 = !1,\n                    _iteratorError4 = void 0;\n\n                try {\n                  for (var _step4, flag, _iterator4 = item.usage[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = !0) {\n                    if (flag = _step4.value, flag === suggestOption.bestMatch.target) return !0;\n                  }\n                } catch (err) {\n                  _didIteratorError4 = !0, _iteratorError4 = err;\n                } finally {\n                  try {\n                    !_iteratorNormalCompletion4 && _iterator4.return && _iterator4.return();\n                  } finally {\n                    if (_didIteratorError4) throw _iteratorError4;\n                  }\n                }\n\n                return !1;\n              });\n\n              console.log(_this.generateDetails(suggestion)[0].trim() + '\\n');\n            } else console.log(' Here\\'s a list of all available options: \\n'), _this.showHelp();\n          }();\n        }\n      }\n\n      return options._ = _, options;\n    },\n    generateExamples: function generateExamples() {\n      var examples = this.details.examples,\n          parts = [];\n\n      for (var item in examples) {\n        if ({}.hasOwnProperty.call(examples, item)) {\n          var usage = this.printSubColor('$ ' + examples[item].usage),\n              description = this.printMainColor('- ' + examples[item].description);\n          parts.push('  ' + description + '\\n\\n    ' + usage + '\\n\\n');\n        }\n      }\n\n      return parts;\n    },\n    generateDetails: function generateDetails(kind) {\n      var items = 'string' == typeof kind ? [].concat(_toConsumableArray(this.details[kind])) : [].concat(_toConsumableArray(kind)),\n          parts = [],\n          isCmd = 'commands' === kind;\n\n      for (var item in items.sort(function (a, b) {\n        var first = isCmd ? a.usage : a.usage[1],\n            second = isCmd ? b.usage : b.usage[1];\n\n        switch (!0) {\n          case first < second:\n            return -1;\n\n          case first > second:\n            return 1;\n\n          default:\n            return 0;\n        }\n      }), items) {\n        if ({}.hasOwnProperty.call(items, item)) {\n          var usage = items[item].usage,\n              initial = items[item].defaultValue;\n          if (usage.constructor === Array) if (isCmd) usage = usage.join(', ');else {\n            var isVersion = usage.indexOf('v');\n            usage = '-' + usage[0] + ', --' + usage[1], initial || (initial = items[item].init), usage += initial && -1 === isVersion ? ' ' + this.handleType(initial)[0] : '';\n          }\n          items[item].usage = usage;\n        }\n      }\n\n      var longest = items.slice().sort(function (a, b) {\n        return b.usage.length - a.usage.length;\n      })[0].usage.length,\n          _iteratorNormalCompletion5 = !0,\n          _didIteratorError5 = !1,\n          _iteratorError5 = void 0;\n\n      try {\n        for (var _step5, _iterator5 = items[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = !0) {\n          var _item = _step5.value,\n              usage = _item.usage,\n              description = _item.description,\n              defaultValue = _item.defaultValue,\n              difference = longest - usage.length;\n          usage += ' '.repeat(difference), 'undefined' != typeof defaultValue && ('boolean' == typeof defaultValue ? description += ' (' + (defaultValue ? 'enabled' : 'disabled') + ' by default)' : description += ' (defaults to ' + JSON.stringify(defaultValue) + ')'), parts.push('  ' + this.printMainColor(usage) + '  ' + this.printSubColor(description));\n        }\n      } catch (err) {\n        _didIteratorError5 = !0, _iteratorError5 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion5 && _iterator5.return && _iterator5.return();\n        } finally {\n          if (_didIteratorError5) throw _iteratorError5;\n        }\n      }\n\n      return parts;\n    },\n    runCommand: function runCommand(details, options) {\n      if ('help' !== details.usage || this.config.help || (details.init = !1), details.init) {\n        var sub = [].concat(this.sub);\n        return sub.shift(), details.init.bind(this)(details.usage, sub, options);\n      }\n\n      return '';\n    },\n    isDefined: function isDefined(name, list) {\n      var children = this.details[list],\n          _iteratorNormalCompletion6 = !0,\n          _didIteratorError6 = !1,\n          _iteratorError6 = void 0;\n\n      try {\n        for (var _step6, _iterator6 = children[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = !0) {\n          var child = _step6.value,\n              usage = child.usage,\n              type = usage.constructor;\n          if (type === Array && -1 < usage.indexOf(name)) return child;\n          if (type === String && usage === name) return child;\n        }\n      } catch (err) {\n        _didIteratorError6 = !0, _iteratorError6 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion6 && _iterator6.return && _iterator6.return();\n        } finally {\n          if (_didIteratorError6) throw _iteratorError6;\n        }\n      }\n\n      return !1;\n    }\n  };\n});","map":{"version":3,"sources":["../../../src/js/args/utils.js"],"names":["handleType","type","value","readOption","option","contents","name","fromArgs","count","propVal","Array","condition","getOptions","options","args","Object","_","related","details","availableOptions","opt","suggestOption","console","suggestion","flag","item","generateExamples","examples","parts","usage","description","generateDetails","items","isCmd","first","a","second","b","initial","isVersion","longest","defaultValue","difference","JSON","runCommand","help","sub","isDefined","children","child"],"mappings":"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","sourcesContent":["import camelcase from 'lodash.camelcase';\nimport stringSimilarity from 'string-similarity';\n\nexport default {\n  handleType(value) {\n    let type = value;\n    if (typeof value !== 'function') {\n      type = value.constructor;\n    }\n\n    // Depending on the type of the default value,\n    // select a default initializer function\n    switch (type) {\n      case String:\n        return ['[value]'];\n      case Array:\n        return ['<list>'];\n      case Number:\n      case parseInt:\n        return ['<n>', parseInt];\n      default:\n        return [''];\n    }\n  },\n\n  readOption(option) {\n    let value = option.defaultValue;\n    const contents = {};\n\n    // If option has been used, get its value\n    for (const name of option.usage) {\n      const fromArgs = this.raw[name];\n      if (typeof fromArgs !== 'undefined') {\n        value = fromArgs;\n      }\n    }\n\n    let count = -1;\n    // Process the option's value\n    for (let name of option.usage) {\n      count += 1;\n      let propVal = value;\n\n      // Convert the value to an array when the option is called just once\n      if (\n        Array.isArray(option.defaultValue) &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = [propVal];\n      }\n\n      if (\n        typeof option.defaultValue !== 'undefined' &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = option.defaultValue;\n      }\n\n      let condition = true;\n\n      if (option.init) {\n        // Only use the toString initializer if value is a number\n        if (option.init === toString) {\n          condition = propVal.constructor === Number;\n        }\n\n        if (condition) {\n          // Pass it through the initializer\n          propVal = option.init(propVal);\n        }\n      }\n\n      // Camelcase option name (skip short flag)\n      if (name.length > 1) {\n        name = camelcase(name);\n      }\n\n      // Add option to list\n      contents[name] = propVal;\n    }\n\n    return contents;\n  },\n\n  getOptions(definedSubcommand) {\n    const options = {};\n    const args = {};\n\n    // Set option defaults\n    for (const option of this.details.options) {\n      if (typeof option.defaultValue === 'undefined') {\n        continue; // eslint-disable-line\n      }\n\n      Object.assign(options, this.readOption(option));\n    }\n\n    // Copy over the arguments\n    Object.assign(args, this.raw);\n    const _ = [...args._];\n    delete args._;\n\n    // Override defaults if used in command line\n    for (const option in args) {\n      if (!{}.hasOwnProperty.call(args, option)) {\n        continue; // eslint-disable-line\n      }\n      const related = this.isDefined(option, 'options');\n\n      if (related) {\n        const details = this.readOption(related);\n        Object.assign(options, details);\n      }\n\n      if (!related && !definedSubcommand) {\n        // Unknown Option\n        const availableOptions = [];\n        this.details.options.forEach((opt) => {\n          availableOptions.push(...opt.usage);\n        });\n\n        const suggestOption = stringSimilarity.findBestMatch(\n          option,\n          availableOptions,\n        );\n\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\n\n        if (suggestOption.bestMatch.rating >= 0.5) {\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\n\n          const suggestion = this.details.options.filter((item) => {\n            for (const flag of item.usage) {\n              if (flag === suggestOption.bestMatch.target) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\n        } else {\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\n          this.showHelp();\n        }\n      }\n    }\n\n    options._ = _;\n    return options;\n  },\n\n  generateExamples() {\n    const { examples } = this.details;\n    const parts = [];\n\n    for (const item in examples) {\n      if (!{}.hasOwnProperty.call(examples, item)) {\n        continue; // eslint-disable-line\n      }\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\n      const description = this.printMainColor(`- ${examples[item].description}`);\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\n    }\n\n    return parts;\n  },\n\n  generateDetails(kind) {\n    // Get all properties of kind from global scope\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\n    const parts = [];\n    const isCmd = kind === 'commands';\n\n    // Sort items alphabetically\n    items.sort((a, b) => {\n      const first = isCmd ? a.usage : a.usage[1];\n      const second = isCmd ? b.usage : b.usage[1];\n\n      switch (true) {\n        case first < second:\n          return -1;\n        case first > second:\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    for (const item in items) {\n      if (!{}.hasOwnProperty.call(items, item)) {\n        continue; // eslint-disable-line\n      }\n\n      let { usage } = items[item];\n      let initial = items[item].defaultValue;\n\n      // If usage is an array, show its contents\n      if (usage.constructor === Array) {\n        if (isCmd) {\n          usage = usage.join(', ');\n        } else {\n          const isVersion = usage.indexOf('v');\n          usage = `-${usage[0]}, --${usage[1]}`;\n\n          if (!initial) {\n            initial = items[item].init;\n          }\n\n          usage += initial && isVersion === -1\n            ? ` ${this.handleType(initial)[0]}`\n            : '';\n        }\n      }\n\n      // Overwrite usage with readable syntax\n      items[item].usage = usage;\n    }\n\n    // Find length of longest option or command\n    // Before doing that, make a copy of the original array\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\n\n    for (const item of items) {\n      let { usage, description } = item;\n      const { defaultValue } = item;\n      const difference = longest - usage.length;\n\n      // Compensate the difference to longest property with spaces\n      usage += ' '.repeat(difference);\n\n      // Add some space around it as well\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'boolean') {\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\n        } else {\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\n        }\n      }\n      parts.push(`  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\n    }\n\n    return parts;\n  },\n\n  runCommand(details, options) {\n    // If help is disabled, remove initializer\n    if (details.usage === 'help' && !this.config.help) {\n      details.init = false; // eslint-disable-line\n    }\n\n    // If command has initializer, call it\n    if (details.init) {\n      const sub = [].concat(this.sub);\n      sub.shift();\n\n      return details.init.bind(this)(details.usage, sub, options);\n    }\n\n    return '';\n  },\n\n  isDefined(name, list) {\n    // Get all items of kind\n    const children = this.details[list];\n\n    // Check if a child matches the requested name\n    for (const child of children) {\n      const { usage } = child;\n      const type = usage.constructor;\n\n      if (type === Array && usage.indexOf(name) > -1) {\n        return child;\n      }\n\n      if (type === String && usage === name) {\n        return child;\n      }\n    }\n\n    // If nothing matches, item is not defined\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}