{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'prop-types'], factory);else if ('undefined' != typeof exports) factory(exports, require('prop-types'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.propTypes), global.types = mod.exports;\n  }\n})(this, function (exports, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.TerminalDefaultProps = exports.TerminalContextTypes = exports.TerminalPropTypes = exports.descriptionsPropType = exports.commandsPropType = void 0;\n\n  var _propTypes2 = function (obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }(_propTypes),\n      commandsPropType = exports.commandsPropType = _propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.shape({\n    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      name: _propTypes2.default.string,\n      description: _propTypes2.default.string,\n      defaultValue: _propTypes2.default.any\n    })),\n    method: _propTypes2.default.func\n  })])),\n      descriptionsPropType = exports.descriptionsPropType = _propTypes2.default.objectOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool])),\n      TerminalPropTypes = exports.TerminalPropTypes = {\n    startState: _propTypes2.default.oneOf(['minimised', 'maximised', 'open', 'closed']),\n    showActions: _propTypes2.default.bool,\n    hideTopBar: _propTypes2.default.bool,\n    allowTabs: _propTypes2.default.bool,\n    msg: _propTypes2.default.string,\n    closedTitle: _propTypes2.default.string,\n    closedMessage: _propTypes2.default.string,\n    color: _propTypes2.default.string,\n    style: _propTypes2.default.object,\n    prompt: _propTypes2.default.string,\n    barColor: _propTypes2.default.string,\n    outputColor: _propTypes2.default.string,\n    backgroundColor: _propTypes2.default.string,\n    commands: commandsPropType,\n    descriptions: descriptionsPropType,\n    watchConsoleLogging: _propTypes2.default.bool,\n    commandPassThrough: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),\n    promptSymbol: _propTypes2.default.string,\n    plugins: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.shape({\n      class: _propTypes2.default.func,\n      config: _propTypes2.default.object\n    })])),\n    shortcuts: _propTypes2.default.objectOf(_propTypes2.default.objectOf(_propTypes2.default.string)),\n    actionHandlers: _propTypes2.default.shape({\n      handleClose: _propTypes2.default.func,\n      handleMinimise: _propTypes2.default.func,\n      handleMaximise: _propTypes2.default.func\n    }),\n    afterChange: _propTypes2.default.func,\n    commandWasRun: _propTypes2.default.func\n  },\n      TerminalContextTypes = exports.TerminalContextTypes = {\n    barShowing: _propTypes2.default.bool,\n    tabsShowing: _propTypes2.default.bool,\n    activeTab: _propTypes2.default.string,\n    instances: _propTypes2.default.array,\n    show: _propTypes2.default.bool,\n    minimise: _propTypes2.default.bool,\n    maximise: _propTypes2.default.bool,\n    closeWindow: _propTypes2.default.func,\n    openWindow: _propTypes2.default.func,\n    minimiseWindow: _propTypes2.default.func,\n    unminimiseWindow: _propTypes2.default.func,\n    maximiseWindow: _propTypes2.default.func,\n    unmaximiseWindow: _propTypes2.default.func,\n    toggleShow: _propTypes2.default.func,\n    toggleMaximise: _propTypes2.default.func,\n    toggleMinimize: _propTypes2.default.func\n  },\n      TerminalDefaultProps = exports.TerminalDefaultProps = {\n    startState: 'open',\n    hideTopBar: !1,\n    allowTabs: !0,\n    showActions: !0,\n    msg: '',\n    closedTitle: 'OOPS! You closed the window.',\n    closedMessage: 'Click on the icon to reopen.',\n    color: 'green',\n    style: {},\n    prompt: 'green',\n    barColor: 'black',\n    backgroundColor: 'black',\n    commands: {},\n    descriptions: {},\n    watchConsoleLogging: !1,\n    commandPassThrough: !1,\n    promptSymbol: '>',\n    plugins: [],\n    shortcuts: {}\n  };\n});","map":{"version":3,"sources":["../../../src/js/components/types.js"],"names":["commandsPropType","options","name","description","defaultValue","method","descriptionsPropType","TerminalPropTypes","startState","showActions","hideTopBar","allowTabs","msg","closedTitle","closedMessage","color","style","prompt","barColor","outputColor","backgroundColor","commands","descriptions","watchConsoleLogging","commandPassThrough","promptSymbol","plugins","class","config","shortcuts","actionHandlers","handleClose","handleMinimise","handleMaximise","afterChange","commandWasRun","TerminalContextTypes","barShowing","tabsShowing","activeTab","instances","show","minimise","maximise","closeWindow","openWindow","minimiseWindow","unminimiseWindow","maximiseWindow","unmaximiseWindow","toggleShow","toggleMaximise","toggleMinimize","TerminalDefaultProps"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const commandsPropType = PropTypes.objectOf(PropTypes.oneOfType([\n  PropTypes.func,\n  PropTypes.shape({\n    options: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      description: PropTypes.string,\n      defaultValue: PropTypes.any,\n    })),\n    method: PropTypes.func,\n  }),\n]));\n\nexport const descriptionsPropType = PropTypes.objectOf(PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.bool,\n]));\n\nexport const TerminalPropTypes = {\n  startState: PropTypes.oneOf(['minimised', 'maximised', 'open', 'closed']),\n  showActions: PropTypes.bool,\n  hideTopBar: PropTypes.bool,\n  allowTabs: PropTypes.bool,\n  msg: PropTypes.string,\n  closedTitle: PropTypes.string,\n  closedMessage: PropTypes.string,\n  color: PropTypes.string,\n  style: PropTypes.object, // eslint-disable-line\n  prompt: PropTypes.string,\n  barColor: PropTypes.string,\n  outputColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  commands: commandsPropType,\n  descriptions: descriptionsPropType,\n  watchConsoleLogging: PropTypes.bool,\n  commandPassThrough: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.bool,\n  ]),\n  promptSymbol: PropTypes.string,\n  plugins: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({\n      class: PropTypes.func,\n      config: PropTypes.object,\n    }),\n  ])),\n  shortcuts: PropTypes.objectOf(PropTypes.objectOf(PropTypes.string)),\n  actionHandlers: PropTypes.shape({\n    handleClose: PropTypes.func,\n    handleMinimise: PropTypes.func,\n    handleMaximise: PropTypes.func,\n  }),\n  afterChange: PropTypes.func,\n  commandWasRun: PropTypes.func,\n};\n\nexport const TerminalContextTypes = {\n  barShowing: PropTypes.bool,\n  tabsShowing: PropTypes.bool,\n  activeTab: PropTypes.string,\n  instances: PropTypes.array,\n  show: PropTypes.bool,\n  minimise: PropTypes.bool,\n  maximise: PropTypes.bool,\n  closeWindow: PropTypes.func,\n  openWindow: PropTypes.func,\n  minimiseWindow: PropTypes.func,\n  unminimiseWindow: PropTypes.func,\n  maximiseWindow: PropTypes.func,\n  unmaximiseWindow: PropTypes.func,\n  toggleShow: PropTypes.func,\n  toggleMaximise: PropTypes.func,\n  toggleMinimize: PropTypes.func,\n};\n\nexport const TerminalDefaultProps = {\n  startState: 'open',\n  hideTopBar: false,\n  allowTabs: true,\n  showActions: true,\n  msg: '',\n  closedTitle: 'OOPS! You closed the window.',\n  closedMessage: 'Click on the icon to reopen.',\n  color: 'green',\n  style: {},\n  prompt: 'green',\n  barColor: 'black',\n  backgroundColor: 'black',\n  commands: {},\n  descriptions: {},\n  watchConsoleLogging: false,\n  commandPassThrough: false,\n  promptSymbol: '>',\n  plugins: [],\n  shortcuts: {},\n};\n"]},"metadata":{},"sourceType":"script"}