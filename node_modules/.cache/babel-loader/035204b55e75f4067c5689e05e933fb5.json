{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', '../../args/index', '../../utils'], factory);else if ('undefined' != typeof exports) factory(exports, require('../../args/index'), require('../../utils'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.index, global.utils), global.terminalUtils = mod.exports;\n  }\n})(this, function (exports, _index, _utils) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.os = void 0, exports.pluginMap = function (plugins, eachHandler) {\n    return plugins.map(function (plugin) {\n      return 'function' == typeof plugin && (plugin = {\n        class: plugin,\n        config: void 0\n      }), plugin;\n    }).forEach(function (pluginObj) {\n      return eachHandler(pluginObj.class, pluginObj.config);\n    });\n  }, exports.uuidv4 = function () {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = 0 | 16 * Math.random(),\n          v = 'x' === c ? r : 8 | 3 & r;\n      return v.toString(16);\n    });\n  }, exports.getShortcuts = function (shortcuts, obj) {\n    return 'object' === ('undefined' == typeof obj ? 'undefined' : _typeof(obj)) && Object.keys(obj).forEach(function (key) {\n      var split = key.toLowerCase().replace(/\\s/g, '').split(',');\n      split.forEach(function (osName) {\n        osName === os && (shortcuts = _extends({}, shortcuts, obj[key]));\n      });\n    }), shortcuts;\n  }, exports.modCommands = function (commands) {\n    var newCommands = {};\n    return Object.keys(commands).forEach(function (name) {\n      var needsInstance = !1,\n          definition = commands[name],\n          method = definition,\n          parse = function parse(i) {\n        return i;\n      };\n\n      if ('undefined' != typeof definition) {\n        if ('object' === ('undefined' == typeof definition ? 'undefined' : _typeof(definition))) {\n          var cmd = new _index2.default();\n          if ('undefined' != typeof definition.options) try {\n            cmd.options(definition.options);\n          } catch (e) {\n            throw new Error('options for command wrong format');\n          }\n          parse = function parse(i) {\n            return cmd.parse(i, {\n              name: name,\n              help: !0,\n              version: !1\n            });\n          }, method = definition.method, needsInstance = definition.needsInstance || !1;\n        }\n\n        newCommands[name] = {\n          parse: parse,\n          method: method,\n          needsInstance: needsInstance\n        };\n      }\n    }), newCommands;\n  };\n\n  var _index2 = function (obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }(_index),\n      _extends = Object.assign || function (target) {\n    for (var source, i = 1; i < arguments.length; i++) {\n      for (var key in source = arguments[i], source) {\n        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n      }\n    }\n\n    return target;\n  },\n      _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  },\n      os = exports.os = (0, _utils.getOs)();\n});","map":{"version":3,"sources":["../../../../src/js/components/Terminal/terminal-utils.js"],"names":["os","pluginMap","plugins","plugin","class","config","eachHandler","pluginObj","uuidv4","r","v","getShortcuts","Object","split","key","osName","shortcuts","obj","modCommands","newCommands","needsInstance","definition","commands","method","parse","cmd","name","help","version"],"mappings":"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","sourcesContent":["import Command from '../../args/index';\nimport { getOs } from '../../utils';\n\nexport const os = getOs();\n\nexport function pluginMap(plugins, eachHandler) {\n  return plugins.map((plugin) => {\n    if (typeof plugin === 'function') {\n      plugin = {\n        class: plugin,\n        config: undefined,\n      };\n    }\n    return plugin;\n  }).forEach(pluginObj => eachHandler(pluginObj.class, pluginObj.config));\n}\n\nexport function uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = Math.random() * 16 | 0; // eslint-disable-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3 | 0x8); // eslint-disable-line\n    return v.toString(16);\n  });\n}\n\nexport function getShortcuts(shortcuts, obj) {\n  if (typeof obj === 'object') {\n    Object.keys(obj).forEach((key) => {\n      const split = key.toLowerCase().replace(/\\s/g, '').split(',');\n      split.forEach((osName) => {\n        if (osName === os) {\n          shortcuts = {\n            ...shortcuts,\n            ...obj[key],\n          };\n        }\n      });\n    });\n  }\n  return shortcuts;\n}\n\nexport function modCommands(commands) {\n  const newCommands = {};\n\n  Object.keys(commands).forEach((name) => {\n    let needsInstance = false;\n    const definition = commands[name];\n    let method = definition;\n    let parse = i => i;\n    if (typeof definition !== 'undefined') {\n      if (typeof definition === 'object') {\n        const cmd = new Command();\n        if (typeof definition.options !== 'undefined') {\n          try {\n            cmd.options(definition.options);\n          } catch (e) {\n            throw new Error('options for command wrong format');\n          }\n        }\n        parse = i =>\n          cmd.parse(i, {\n            name,\n            help: true,\n            version: false,\n          });\n        method = definition.method; // eslint-disable-line\n        needsInstance = definition.needsInstance || false;\n      }\n\n      newCommands[name] = {\n        parse,\n        method,\n        needsInstance,\n      };\n    }\n  });\n\n  return newCommands;\n}\n"]},"metadata":{},"sourceType":"script"}