{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.help = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function () {\n    var name = this.config.name,\n        firstBig = function (word) {\n      return word.charAt(0).toUpperCase() + word.substr(1);\n    },\n        parts = [],\n        groups = {\n      options: !0,\n      examples: !0\n    };\n\n    for (var group in groups) 0 < this.details[group].length || (groups[group] = !1);\n\n    var optionHandle = groups.options ? '[options] ' : '',\n        value = 'string' == typeof this.config.value ? ' ' + this.config.value : '';\n\n    for (var _group in parts.push(['', 'Usage: ' + this.printMainColor(name) + ' ' + this.printSubColor(optionHandle + value), '']), groups) groups[_group] && (parts.push(['', firstBig(_group) + ':', '', '']), 'examples' == _group ? parts.push(this.generateExamples()) : parts.push(this.generateDetails(_group)), parts.push(['', '']));\n\n    var output = '',\n        _iteratorNormalCompletion = !0,\n        _didIteratorError = !1,\n        _iteratorError = void 0;\n\n    try {\n      for (var _step, part, _iterator = parts[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) part = _step.value, output += part.join('\\n  ');\n    } catch (err) {\n      _didIteratorError = !0, _iteratorError = err;\n    } finally {\n      try {\n        !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n      } finally {\n        if (_didIteratorError) throw _iteratorError;\n      }\n    }\n\n    groups.options || (output = 'No options available');\n    var usageFilter = this.config.usageFilter;\n    'function' == typeof usageFilter && (output = usageFilter(output) || output), console.log(output);\n  };\n});","map":{"version":3,"sources":["../../../src/js/args/help.js"],"names":["name","firstBig","word","parts","groups","options","examples","optionHandle","value","output","part","usageFilter","console"],"mappings":";;;;;;;;;;;;wBAAe,YAAY;AAAA,QACjBA,IADiB,GACR,KADQ,MACR,CADQ,IAAA;AAAA,QAEnBC,QAAAA,GAAW,UAAA,IAAA,EAAA;AAAA,aAAQC,IAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAA+BA,IAAAA,CAAAA,MAAAA,CAAvC,CAAuCA,CAAvC;AAFQ,KAAA;AAAA,QAInBC,KAAAA,GAJmB,EAAA;AAAA,QAMnBC,MAAAA,GAAS;AACbC,MAAAA,OAAAA,EAAAA,CADa,CAAA;AAEbC,MAAAA,QAAAA,EAAAA,CARuB;AAMV,KANU;;AAWzB,SAAK,IAAL,KAAA,IAAA,MAAA,EACM,IAAA,KAAA,OAAA,CAAA,KAAA,EADN,MACM,KAIJF,MAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CALF,CACM;;AAON,QAAMG,YAAAA,GAAeH,MAAAA,CAAAA,OAAAA,GAAAA,YAAAA,GAArB,EAAA;AAAA,QACMI,KAAAA,GAAQ,YAAA,OAAO,KAAA,MAAA,CAAP,KAAA,GAAA,MACN,KAAA,MAAA,CADM,KAAA,GADd,EAAA;;AAWA,SAAK,IANLL,MAMA,IANAA,KAAAA,CAAAA,IAAAA,CAAW,CAAA,EAAA,EAAA,YAEC,KAAA,cAAA,CAFD,IAEC,CAFD,GAAA,GAAA,GAE8B,KAAA,aAAA,CAAmBI,YAAAA,GAFjD,KAE8B,CAF9B,EAAXJ,EAAW,CAAXA,GAMA,MAAA,EACOC,MAAAA,CADP,MACOA,CAAAA,KAILD,KAAAA,CAAAA,IAAAA,CAAW,CAAA,EAAA,EAAQF,QAAAA,CAAR,MAAQA,CAAAA,GAAR,GAAA,EAAA,EAAA,EALb,EAKa,CAAXE,GAEI,cAPN,MAOM,GACFA,KAAAA,CAAAA,IAAAA,CAAW,KARf,gBAQe,EAAXA,CADE,GAGFA,KAAAA,CAAAA,IAAAA,CAAW,KAAA,eAAA,CAVf,MAUe,CAAXA,CALFA,EAQAA,KAAAA,CAAAA,IAAAA,CAAW,CAAA,EAAA,EAbb,EAaa,CAAXA,CAZKC;;AAeP,QAAIK,MAAAA,GAAJ,EAAA;AAAA,QAAA,yBAAA,GAAA,CAAA,CAAA;AAAA,QAAA,iBAAA,GAAA,CAAA,CAAA;AAAA,QAAA,cAAA,GAAA,KAAA,CAAA;;AA9CyB,QAAA;AAiDzB,WAAA,IAAA,KAAA,EAAA,IAAA,EAAA,SAAA,GAAmBN,KAAnB,CAAA,MAAA,CAAA,QAAA,CAAmBA,EAAnB,EAAA,EAAA,yBAAA,GAAA,CAAA,KAAA,GAAA,SAAA,CAAA,IAAA,EAAA,EAAA,IAAA,CAAA,EAAA,yBAAA,GAAA,CAAA,CAAA,EAAWO,IAAX,GAAA,KAAA,CAAA,KAAWA,EACTD,MAAAA,IAAUC,IAAAA,CAAAA,IAAAA,CAlDa,MAkDbA,CADDA;AAjDc,KAAA,CAAA,OAAA,GAAA,EAAA;AAAA,MAAA,iBAAA,GAAA,CAAA,CAAA,EAAA,cAAA,GAAA,GAAA;AAAA,KAAA,SAAA;AAAA,UAAA;AAAA,SAAA,yBAAA,IAAA,SAAA,CAAA,MAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,OAAA,SAAA;AAAA,YAAA,iBAAA,EAAA,MAAA,cAAA;AAAA;AAqDpBN;;AAAAA,IAAAA,MAAAA,CArDoB,OAqDpBA,KACHK,MAAAA,GAtDuB,sBAqDpBL;AArDoB,QAyDjBO,WAzDiB,GAyDD,KAzDC,MAyDD,CAzDC,WAAA;AA4DrB,kBAAA,OA5DqB,WA4DrB,KACFF,MAAAA,GAASE,WAAAA,CAAAA,MAAAA,CAAAA,IA7Dc,MA4DrB,GAIJC,OAAAA,CAAAA,GAAAA,CAAAA,MAAAA,CAJI","sourcesContent":["export default function () {\n  const { name } = this.config;\n  const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\n\n  const parts = [];\n\n  const groups = {\n    options: true,\n    examples: true,\n  };\n\n  for (const group in groups) {\n    if (this.details[group].length > 0) {\n      continue; // eslint-disable-line\n    }\n\n    groups[group] = false;\n  }\n\n  const optionHandle = groups.options ? '[options] ' : '';\n  const value = typeof this.config.value === 'string'\n    ? ` ${this.config.value}`\n    : '';\n\n  parts.push([\n    '',\n    `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + value)}`,\n    '',\n  ]);\n\n  for (const group in groups) {\n    if (!groups[group]) {\n      continue; // eslint-disable-line\n    }\n\n    parts.push(['', `${firstBig(group)}:`, '', '']);\n\n    if (group === 'examples') {\n      parts.push(this.generateExamples());\n    } else {\n      parts.push(this.generateDetails(group));\n    }\n\n    parts.push(['', '']);\n  }\n\n  let output = '';\n\n  // And finally, merge and output them\n  for (const part of parts) {\n    output += part.join('\\n  ');\n  }\n\n  if (!groups.options) {\n    output = 'No options available';\n  }\n\n  const { usageFilter } = this.config;\n\n  // If filter is available, pass usage information through\n  if (typeof usageFilter === 'function') {\n    output = usageFilter(output) || output;\n  }\n\n  console.log(output); // eslint-disable-line\n}\n"]},"metadata":{},"sourceType":"script"}