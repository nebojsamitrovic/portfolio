{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.option = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function (name, description, defaultValue, init) {\n    var usage = [],\n        assignShort = function (n, options, short) {\n      return options.find(function (flagName) {\n        return flagName.usage[0] === short;\n      }) && (short = n.charAt(0).toUpperCase()), [short, n];\n    };\n\n    switch (name.constructor) {\n      case String:\n        usage = assignShort(name, this.details.options, name.charAt(0));\n        break;\n\n      case Array:\n        usage = usage.concat(name);\n        break;\n\n      default:\n        throw new Error('Invalid name for option');\n    }\n\n    if (0 < usage.length && 1 < usage[0].length) throw new Error('Short version of option is longer than 1 char');\n    var optionDetails = {\n      defaultValue: defaultValue,\n      usage: usage,\n      description: description\n    };\n\n    if (0 === this.details.options.filter(function (item) {\n      return item.usage[1] === usage[1];\n    }).length) {\n      var defaultIsWrong;\n\n      if (defaultIsWrong = !1 === defaultValue || null === defaultValue || void 0 === defaultValue, !defaultIsWrong) {\n        optionDetails.init = 'function' == typeof init ? init : this.handleType(defaultValue)[1];\n      }\n\n      this.details.options.push(optionDetails);\n    }\n\n    return this;\n  };\n});","map":{"version":3,"sources":["../../../src/js/args/option.js"],"names":["usage","assignShort","options","flagName","short","n","name","optionDetails","defaultValue","description","item","defaultIsWrong","init"],"mappings":";;;;;;;;;;;;wBAAe,UAAA,IAAA,EAAA,WAAA,EAAA,YAAA,EAAA,IAAA,EAAiD;AAC9D,QAAIA,KAAAA,GAAJ,EAAA;AAAA,QAEMC,WAAAA,GAAc,UAAA,CAAA,EAAA,OAAA,EAAA,KAAA,EAAuB;AACrCC,aAAAA,OAAAA,CAAAA,IAAAA,CAAa,UAAA,QAAA,EAAA;AAAA,eAAYC,QAAAA,CAAAA,KAAAA,CAAAA,CAAAA,MAAZ,KAAA;AAAbD,OAAAA,MACFE,KAAAA,GAAQC,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,EADNH,GAGG,CAAA,KAAA,EAAA,CAAA,CAHHA;AAHN,KAAA;;AAWA,YAAQI,IAAAA,CAAR,WAAA;AACE,WAAA,MAAA;AACEN,QAAAA,KAAAA,GAAQC,WAAAA,CAAAA,IAAAA,EAAkB,KAAA,OAAA,CAAlBA,OAAAA,EAAwCK,IAAAA,CAAAA,MAAAA,CADlD,CACkDA,CAAxCL,CAARD;AACA;;AACF,WAAA,KAAA;AACEA,QAAAA,KAAAA,GAAQA,KAAAA,CAAAA,MAAAA,CADV,IACUA,CAARA;AACA;;AACF;AACE,cAAM,IAAA,KAAA,CARV,yBAQU,CAAN;AARJ;;AAYA,QAAI,IAAA,KAAA,CAAA,MAAA,IAAoB,IAAA,KAAA,CAAA,CAAA,CAAA,CAAxB,MAAA,EACE,MAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AAGF,QAAMO,aAAAA,GAAgB;AACpBC,MAAAA,YAAAA,EADoB,YAAA;AAEpBR,MAAAA,KAAAA,EAFoB,KAAA;AAGpBS,MAAAA,WAAAA,EAHF;AAAsB,KAAtB;;AAMA,QAAI,MAAA,KAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAA4B,UAAA,IAAA,EAAA;AAAA,aAAQC,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,MAAkBV,KAAAA,CAA1B,CAA0BA,CAA1B;AAA5B,KAAA,EAAJ,MAAA,EAAkF;AAChF,UAAA,cAAA;;AAiBA,UAbIW,cAaJ,GAAA,CAAA,CAAA,KAfQH,YAeR,IAXO,SAJCA,YAeR,IAAA,KAAA,CAAA,KAfQA,YAEJG,EAaA,CAAJ,cAAA,EAAqB;AAEnBJ,QAAAA,aAAAA,CAAAA,IAAAA,GADqB,cAAA,OAAOK,IAAP,GACA,IADA,GACsB,KAAA,UAAA,CAAA,YAAA,EAAA,CAAA,CAA3CL;AAIF;;AAAA,WAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,aAAA;AAIF;;AAAA,WAAO,IAAP","sourcesContent":["export default function (name, description, defaultValue, init) {\n  let usage = [];\n\n  const assignShort = (n, options, short) => {\n    if (options.find(flagName => flagName.usage[0] === short)) {\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\n    }\n    return [short, n];\n  };\n\n  // If name is an array, pick the values\n  // Otherwise just use the whole thing\n  switch (name.constructor) {\n    case String:\n      usage = assignShort(name, this.details.options, name.charAt(0));\n      break;\n    case Array:\n      usage = usage.concat(name);\n      break;\n    default:\n      throw new Error('Invalid name for option');\n  }\n\n  // Throw error if short option is too long\n  if (usage.length > 0 && usage[0].length > 1) {\n    throw new Error('Short version of option is longer than 1 char');\n  }\n\n  const optionDetails = {\n    defaultValue,\n    usage,\n    description,\n  };\n\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n  }\n\n  // Allow chaining of .option()\n  return this;\n}\n"]},"metadata":{},"sourceType":"script"}