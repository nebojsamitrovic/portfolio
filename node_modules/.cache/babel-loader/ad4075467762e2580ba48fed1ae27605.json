{"ast":null,"code":"var _forEach = require('lodash.foreach');\n\nvar _map = require('lodash.map');\n\nvar _every = require('lodash.every');\n\nvar _maxBy = require('lodash.maxby');\n\nvar _flattenDeep = require('lodash.flattendeep');\n\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\n\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n\n  if (result != null) {\n    return result;\n  }\n\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n\n  _forEach(pairs1, function (pair1) {\n    for (var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n\n  return 2.0 * intersection / union; // private functions ---------------------------\n\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n\n    for (var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n\n    return pairs;\n  }\n\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n\n    return null;\n  }\n\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    } // if only one is empty string\n\n\n    if (str1.length + str2.length > 0 && str1.length * str2.length == 0) {\n      return 0;\n    }\n\n    return null;\n  }\n}\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  }; // private functions ---------------------------\n\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = typeof mainString === 'string';\n\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) && targetStrings.length > 0 && _every(targetStrings, function (targetString) {\n      return typeof targetString === 'string';\n    });\n\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}","map":{"version":3,"sources":["/var/www/html/nebojsamitrovic.github.io/node_modules/string-similarity/compare-strings.js"],"names":["_forEach","require","_map","_every","_maxBy","_flattenDeep","exports","compareTwoStrings","findBestMatch","str1","str2","result","calculateResultIfIdentical","calculateResultIfEitherIsEmpty","calculateResultIfBothAreSingleCharacter","pairs1","wordLetterPairs","toUpperCase","pairs2","intersection","union","length","pair1","i","pair2","splice","letterPairs","str","numPairs","pairs","substring","split","mainString","targetStrings","areArgsValid","Error","ratings","targetString","target","rating","bestMatch","mainStringIsAString","targetStringsIsAnArrayOfStrings","Array","isArray"],"mappings":"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","sourcesContent":["var _forEach = require('lodash.foreach');\nvar _map = require('lodash.map');\nvar _every = require('lodash.every');\nvar _maxBy = require('lodash.maxby');\nvar _flattenDeep = require('lodash.flattendeep');\n\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\n\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n  if (result != null) {\n    return result;\n  }\n\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n\n  _forEach(pairs1, function (pair1) {\n    for(var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n\n  return (2.0 * intersection) / union;\n\n  // private functions ---------------------------\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n    for(var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n    return pairs;\n  }\n\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n    return null;\n  }\n\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    }\n\n    // if only one is empty string\n    if ((str1.length + str2.length) > 0 && (str1.length * str2.length) == 0) {\n      return 0;\n    }\n    return null;\n  }\n}\n\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  };\n\n  // private functions ---------------------------\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = (typeof mainString === 'string');\n\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) &&\n      targetStrings.length > 0 &&\n      _every(targetStrings, function (targetString) {\n        return (typeof targetString === 'string');\n      });\n\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}