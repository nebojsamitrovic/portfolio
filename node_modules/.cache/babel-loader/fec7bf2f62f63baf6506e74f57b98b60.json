{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'react', 'string-similarity', 'whatkey', 'lodash.isequal', 'styled-components', '../../utils', '../types', './terminal-utils', './styled-elements', '../Bar', '../Content/index', '../Tabs/index'], factory);else if ('undefined' != typeof exports) factory(exports, require('react'), require('string-similarity'), require('whatkey'), require('lodash.isequal'), require('styled-components'), require('../../utils'), require('../types'), require('./terminal-utils'), require('./styled-elements'), require('../Bar'), require('../Content/index'), require('../Tabs/index'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.React, global.stringSimilarity, global.whatkey, global.lodash, global.styledComponents, global.utils, global.types, global.terminalUtils, global.styledElements, global.Bar, global.index, global.index), global.index = mod.exports;\n  }\n})(this, function (exports, _react, _stringSimilarity, _whatkey2, _lodash, _styledComponents, _utils, _types, _terminalUtils, _styledElements, _Bar, _index, _index3) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    }\n\n    return Array.from(arr);\n  }\n\n  function _defineProperty(obj, key, value) {\n    return key in obj ? Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : obj[key] = value, obj;\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError('Cannot call a class as a function');\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) throw new ReferenceError('this hasn\\'t been initialised - super() hasn\\'t been called');\n    return call && ('object' == typeof call || 'function' == typeof call) ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if ('function' != typeof superClass && null !== superClass) throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);\n  }\n\n  function compLogic(comp) {\n    switch (comp) {\n      case '>':\n        return function (a, b) {\n          return parseInt(a, 10) > parseInt(b, 10);\n        };\n\n      case '<':\n        return function (a, b) {\n          return parseInt(a, 10) < parseInt(b, 10);\n        };\n\n      case '>=':\n        return function (a, b) {\n          return parseInt(a, 10) >= parseInt(b, 10);\n        };\n\n      case '<=':\n        return function (a, b) {\n          return parseInt(a, 10) <= parseInt(b, 10);\n        };\n\n      case '!=':\n        return function (a, b) {\n          return a !== b;\n        };\n\n      case '=':\n      default:\n        return function (a, b) {\n          return a === b;\n        };\n    }\n  }\n\n  function putCursorAtEnd(el) {\n    if (document.activeElement !== el && el.focus(), el.setSelectionRange) {\n      var len = 2 * el.value.length;\n      setTimeout(function () {\n        el.setSelectionRange(len, len);\n      }, 1);\n    } else el.value = el.value;\n  }\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  });\n\n  var _class,\n      _temp,\n      _react2 = _interopRequireDefault(_react),\n      _stringSimilarity2 = _interopRequireDefault(_stringSimilarity),\n      _whatkey3 = _interopRequireDefault(_whatkey2),\n      _lodash2 = _interopRequireDefault(_lodash),\n      _Bar2 = _interopRequireDefault(_Bar),\n      _index2 = _interopRequireDefault(_index),\n      _index4 = _interopRequireDefault(_index3),\n      _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n  },\n      _extends = Object.assign || function (target) {\n    for (var source, i = 1; i < arguments.length; i++) {\n      for (var key in source = arguments[i], source) {\n        Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n      }\n    }\n\n    return target;\n  },\n      _createClass = function () {\n    function defineProperties(target, props) {\n      for (var descriptor, i = 0; i < props.length; i++) {\n        descriptor = props[i], descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, 'value' in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;\n    };\n  }(),\n      Terminal = (_temp = _class = function (_Component) {\n    function Terminal(props) {\n      _classCallCheck(this, Terminal);\n\n      var _this = _possibleConstructorReturn(this, (Terminal.__proto__ || Object.getPrototypeOf(Terminal)).call(this, props));\n\n      return _this.componentWillMount = function () {\n        _this.loadPlugins(), _this.assembleCommands(), _this.setDescriptions(), _this.setShortcuts(), _this.createTab(!0);\n      }, _this.componentDidMount = function () {\n        _this.props.watchConsoleLogging && _this.watchConsoleLogging();\n      }, _this.createTab = function () {\n        var force = 0 < arguments.length && void 0 !== arguments[0] && arguments[0],\n            _this$props = _this.props,\n            allowTabs = _this$props.allowTabs,\n            promptSymbol = _this$props.promptSymbol;\n\n        if (force || allowTabs) {\n          var tabs = _this.state.tabs,\n              id = (0, _terminalUtils.uuidv4)();\n          tabs.push(_react2.default.createElement(_index2.default, {\n            key: id,\n            id: id,\n            prompt: promptSymbol,\n            handleChange: _this.handleChange,\n            handlerKeyPress: _this.handlerKeyPress,\n            register: function register() {\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return _this.registerInstance.apply(_this, [id].concat(args));\n            }\n          })), _this.setState({\n            activeTab: id,\n            tabs: tabs\n          });\n        }\n      }, _this.removeTab = function (index) {\n        var tabs = _this.state.tabs;\n        tabs.splice(index, 1), _this.setState({\n          tabs: tabs\n        });\n      }, _this.getAppContent = function () {\n        var _this$state = _this.state,\n            show = _this$state.show,\n            minimise = _this$state.minimise;\n        return show ? minimise ? _this.getBar() : _this.getContent() : _this.getNote();\n      }, _this.getContent = function () {\n        var _this$props2 = _this.props,\n            color = _this$props2.color,\n            style = _this$props2.style,\n            showActions = _this$props2.showActions,\n            hideTopBar = _this$props2.hideTopBar,\n            allowTabs = _this$props2.allowTabs,\n            actionHandlers = _this$props2.actionHandlers,\n            _this$state2 = _this.state,\n            activeTab = _this$state2.activeTab,\n            tabs = _this$state2.tabs;\n        return _react2.default.createElement('div', {\n          style: _extends({}, {\n            height: '100%',\n            color: color || 'green',\n            animation: 'fadeIn 0.18s ease-in',\n            fontFamily: '\\'Inconsolata\\', monospace',\n            fontSize: '0.9em'\n          }, style)\n        }, !hideTopBar && _react2.default.createElement(_Bar2.default, _extends({\n          showActions: showActions\n        }, actionHandlers)), allowTabs && _react2.default.createElement(_index4.default, {\n          active: activeTab,\n          setActiveTab: _this.setActiveTab,\n          createTab: _this.createTab,\n          removeTab: _this.removeTab\n        }), tabs);\n      }, _this.getBar = function () {\n        var _this$props3 = _this.props,\n            style = _this$props3.style,\n            showActions = _this$props3.showActions,\n            actionHandlers = _this$props3.actionHandlers;\n        return _react2.default.createElement(_styledElements.ContainerWrapper, {\n          style: _extends({}, style)\n        }, _react2.default.createElement(_Bar2.default, _extends({\n          showActions: showActions\n        }, actionHandlers)));\n      }, _this.getNote = function () {\n        return _react2.default.createElement(_styledElements.Note, null, _react2.default.createElement('h1', null, _this.props.closedTitle), _react2.default.createElement('img', {\n          src: 'https://camo.githubusercontent.com/95ad3fffa11193f85dedbf14ca67e4c5c07182d0/687474703a2f2f69636f6e732e69636f6e617263686976652e636f6d2f69636f6e732f70616f6d656469612f736d616c6c2d6e2d666c61742f313032342f7465726d696e616c2d69636f6e2e706e67',\n          width: '200',\n          height: '200',\n          alt: 'note',\n          onKeyPress: _this.toggleState('show'),\n          onClick: _this.toggleState('show')\n        }), _this.props.closedMessage);\n      }, _this.getPluginData = function (name) {\n        return _this.pluginData[name];\n      }, _this.setPluginData = function (name, data) {\n        _this.pluginData[name] = data;\n      }, _this.setDescriptions = function () {\n        var descriptions = _extends({}, _this.defaultDesciptions, _this.props.descriptions);\n\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.descriptions && (descriptions = _extends({}, descriptions, plugin.descriptions));\n        }), _this.setState({\n          descriptions: descriptions\n        });\n      }, _this.setShortcuts = function () {\n        var shortcuts = (0, _terminalUtils.getShortcuts)({}, _this.defaultShortcuts);\n        shortcuts = (0, _terminalUtils.getShortcuts)(shortcuts, _this.props.shortcuts), (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.shortcuts && (shortcuts = (0, _terminalUtils.getShortcuts)(shortcuts, plugin.shortcuts));\n        }), _this.setState({\n          shortcuts: shortcuts\n        });\n      }, _this.setPromptPrefix = function (instance, promptPrefix) {\n        null === instance.state.controller && instance.setState({\n          promptPrefix: promptPrefix\n        });\n      }, _this.setPromptSymbol = function (instance, prompt) {\n        null === instance.state.controller && instance.setState({\n          prompt: prompt\n        });\n      }, _this.setActiveTab = function (activeTab) {\n        _this.setState({\n          activeTab: activeTab\n        });\n      }, _this.setFalse = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !1));\n        };\n      }, _this.setTrue = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !0));\n        };\n      }, _this.setValueWithHistory = function (instance, position, inputRef) {\n        var history = instance.state.history;\n        history[position] && (instance.setState({\n          historyCounter: position\n        }), inputRef.value = history[position], putCursorAtEnd(inputRef));\n      }, _this.checkVersion = function (comp, ver) {\n        if ('*' === ver) return !0;\n        if (!/^(\\d|\\.)+$/.test(ver)) throw new Error('Version can only have numbers and periods');else {\n          var clean = ver.toLowerCase().replace(/x/g, '0');\n          '.' === clean[clean.length - 1] && (clean += '0');\n\n          for (var split = clean.split('.'); 3 > split.length;) {\n            split.push('0');\n          }\n\n          var realSplit = Terminal.version.split('.'),\n              checkBools = split.map(function (val, index) {\n            return compLogic(comp)(realSplit[index], val);\n          });\n          return 0 > checkBools.indexOf(!1);\n        }\n      }, _this.registerInstance = function (index, instance) {\n        var instances = _this.state.instances,\n            pluginInstances = {},\n            pluginMethods = {},\n            old = instances.find(function (i) {\n          return i.index === index;\n        });\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (PluginClass, config) {\n          try {\n            var plugin,\n                api = {\n              printLine: _this.printLine.bind(_this, instance),\n              removeLine: _this.removeLine.bind(_this, instance),\n              runCommand: _this.runCommand.bind(_this, instance),\n              setCanScroll: _this.setCanScroll.bind(_this, instance),\n              setScrollPosition: _this.setScrollPosition.bind(_this, instance),\n              focusInput: _this.focusInput.bind(_this, instance),\n              setPromptPrefix: _this.setPromptPrefix.bind(_this, instance),\n              setPromptSymbol: _this.setPromptSymbol.bind(_this, instance),\n              getPluginMethod: _this.getPluginMethod.bind(_this, instance),\n              takeControl: _this.pluginTakeControl.bind(_this, instance),\n              releaseControl: _this.pluginReleaseControl.bind(_this, instance),\n              getData: function getData() {\n                return _this.getPluginData(PluginClass.displayName);\n              },\n              setData: function setData(data) {\n                return _this.setPluginData(PluginClass.displayName, data);\n              },\n              checkVersion: _this.checkVersion.bind(_this),\n              version: Terminal.version,\n              os: _terminalUtils.os\n            };\n            old ? old.pluginInstances[PluginClass.displayName].updateApi(api) : (plugin = new PluginClass(api, config), pluginMethods[PluginClass.displayName] = _extends({}, plugin.getPublicMethods(), {\n              _getName: function _getName() {\n                return PluginClass.displayName;\n              },\n              _getVersion: function _getVersion() {\n                return PluginClass.version;\n              }\n            })), pluginInstances[PluginClass.displayName] = plugin;\n          } catch (e) {\n            console.error('Error instantiating plugin ' + PluginClass.displayName, e);\n          }\n        });\n        var data = {\n          index: index,\n          instance: instance,\n          pluginMethods: old ? old.pluginMethods : pluginMethods,\n          pluginInstances: old ? old.pluginInstances : pluginInstances\n        };\n\n        if (old) {\n          var realIndex = instances.indexOf(old);\n          instances[realIndex] = data;\n        } else instances.push(data);\n\n        return _this.setState({\n          instances: instances\n        }), function () {\n          var insts = _this.state.instances;\n\n          _this.setState({\n            instances: insts.filter(function (i) {\n              return !(0, _lodash2.default)(i.instance, instance);\n            })\n          });\n        };\n      }, _this.pluginTakeControl = function (instance, controller, newPrompt, newPromptPrefix) {\n        var _instance$state = instance.state,\n            promptPrefix = _instance$state.promptPrefix,\n            prompt = _instance$state.prompt;\n        instance.setState({\n          controller: controller,\n          prompt: 'undefined' == typeof newPrompt ? prompt : newPrompt,\n          promptPrefix: 'undefined' == typeof newPromptPrefix ? promptPrefix : newPromptPrefix,\n          oldPrefix: promptPrefix,\n          oldPrompt: prompt\n        });\n      }, _this.pluginReleaseControl = function (instance) {\n        var _instance$state2 = instance.state,\n            oldPrefix = _instance$state2.oldPrefix,\n            oldPrompt = _instance$state2.oldPrompt;\n        instance.setState({\n          controller: null,\n          promptPrefix: oldPrefix,\n          prompt: oldPrompt\n        });\n      }, _this.toggleState = function (name) {\n        return function () {\n          return _this.setState(_defineProperty({}, name, !_this.state[name]));\n        };\n      }, _this.assembleCommands = function () {\n        var commands = _extends({}, _this.defaultCommands, _this.props.commands);\n\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          plugin.commands && (commands = _extends({}, commands, plugin.commands));\n        }), _this.setState({\n          commands: (0, _terminalUtils.modCommands)(commands)\n        });\n      }, _this.autocompleteValue = function (inputRef) {\n        var descriptions = _this.state.descriptions,\n            keysToCheck = Object.keys(descriptions).filter(function (key) {\n          return !1 !== descriptions[key];\n        }),\n            ratings = [];\n        return ratings = 1 < inputRef.value.length ? _stringSimilarity2.default.findBestMatch(inputRef.value, keysToCheck).ratings : keysToCheck.reduce(function (full, item) {\n          return 0 === item.indexOf(inputRef.value) && full.push({\n            target: item,\n            rating: 1\n          }), full;\n        }, []), ratings.filter(function (item) {\n          return 0 < item.rating;\n        });\n      }, _this.clearScreen = function (args, printLine, runCommand, instance) {\n        instance.setState({\n          summary: []\n        });\n      }, _this.checkShortcuts = function (instance, key, e) {\n        var controller = instance.state.controller,\n            cuts = {};\n        if (null !== controller) controller.shortcuts && (cuts = (0, _terminalUtils.getShortcuts)(cuts, controller.shortcuts));else {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          cuts = _this.state.shortcuts, instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n            cuts = (0, _terminalUtils.getShortcuts)(cuts, i.shortcuts);\n          });\n        }\n        var shortcuts = Object.keys(cuts);\n\n        if (0 < shortcuts.length) {\n          var keyInputs = instance.state.keyInputs,\n              modKey = key;\n          'meta' === key && (modKey = 'darwin' === _terminalUtils.os ? 'cmd' : 'win' === _terminalUtils.os ? 'win' : 'meta'), keyInputs.push(modKey);\n          var len = keyInputs.length,\n              options = shortcuts.map(function (cut, i) {\n            return [cut.replace(/\\s/g, '').split('+'), i];\n          }).filter(function (cut) {\n            return cut[0].length >= keyInputs.length;\n          }).filter(function (cut) {\n            return (0, _lodash2.default)(cut[0].slice(0, len), keyInputs);\n          });\n          if (!(0 < options.length)) 0 < keyInputs.length && instance.setState({\n            keyInputs: []\n          });else if (1 === options.length && options[0][0].length === len) {\n            var shortcut = shortcuts[options[0][1]],\n                action = cuts[shortcut];\n            'string' == typeof action ? _this.runCommand(instance, cuts[shortcut]) : 'function' == typeof action && (e.preventDefault(), e.stopPropagation(), action()), instance.setState({\n              keyInputs: []\n            });\n          }\n        }\n      }, _this.editLine = function (args, printLine, runCommand, instance) {\n        var summary = instance.state.summary,\n            index = args.line;\n        0 > index && (index = 0 === summary.length ? 0 : summary.length - index), summary[index] = args._.join(' '), instance.setState({\n          summary: summary\n        });\n      }, _this.handleChange = function (instance, e) {\n        var _instance$state3 = instance.state,\n            input = _instance$state3.input,\n            promptPrefix = _instance$state3.promptPrefix,\n            prompt = _instance$state3.prompt,\n            history = _instance$state3.history,\n            controller = _instance$state3.controller,\n            saveToHistory = null === controller || controller.history || !1;\n\n        if ('Enter' === e.key && !e.shiftKey) {\n          'undefined' == typeof e.dontShowCommand && _this.printLine.bind(_this, instance)('' + promptPrefix + prompt + ' ' + e.target.value, !1), input.push(e.target.value);\n\n          var res = _this.runCommand(instance, '' + input.join('\\n'));\n\n          'undefined' != typeof res && _this.printLine.bind(_this, instance)(res);\n          var newHistory = [].concat(_toConsumableArray(history), [e.target.value]),\n              historyProps = saveToHistory ? {\n            history: newHistory,\n            historyCounter: newHistory.length\n          } : {};\n          instance.setState(_extends({\n            input: []\n          }, historyProps)), e.target.value = '';\n        } else if ('Enter' === e.key && e.shiftKey) {\n          _this.printLine.bind(_this, instance)('' + promptPrefix + prompt + ' ' + e.target.value, !1);\n\n          var _newHistory = [].concat(_toConsumableArray(history), [e.target.value]),\n              _historyProps = saveToHistory ? {\n            history: _newHistory,\n            historyCounter: _newHistory.length\n          } : {};\n\n          instance.setState(_extends({\n            input: [].concat(_toConsumableArray(input), [e.target.value])\n          }, _historyProps)), e.target.value = '';\n        }\n\n        'function' == typeof _this.props.afterChange && _this.props.afterChange(e);\n      }, _this.handlerKeyPress = function (instance, e, inputRef) {\n        var _whatkey = (0, _whatkey3.default)(e),\n            key = _whatkey.key,\n            _instance$state4 = instance.state,\n            historyCounter = _instance$state4.historyCounter,\n            keyInputs = _instance$state4.keyInputs,\n            controller = _instance$state4.controller;\n\n        if (0 === keyInputs.length || 0 === keyInputs.length) if (null !== controller) controller.onKeyPress && controller.onKeyPress(key);else switch (key) {\n          case 'up':\n            _this.setValueWithHistory(instance, historyCounter - 1, inputRef), _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n            break;\n\n          case 'down':\n            _this.setValueWithHistory(instance, historyCounter + 1, inputRef), _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n            break;\n\n          case 'tab':\n            if (e.preventDefault(), '' !== inputRef.value && !0 === _this.state.tabbed) {\n              var contents = _this.autocompleteValue(inputRef);\n\n              _this.printLine(instance, '' + instance.state.promptPrefix + instance.state.prompt + ' ' + inputRef.value, !1), _this.printLine(instance, _react2.default.createElement('span', null, contents.filter(function (item) {\n                return 'undefined' != typeof item;\n              }).map(function (item) {\n                var styles = {\n                  marginRight: 5,\n                  width: 'calc(33% - 5px)',\n                  display: 'inline-block'\n                };\n                return 3 < contents.length && (styles.marginBottom = 5), _react2.default.createElement('span', {\n                  style: styles,\n                  key: item.target + '-' + item.rating\n                }, item.target);\n              })), !1), _this.setState({\n                tabbed: !1\n              });\n            } else _this.setState({\n              tabbed: !0\n            });\n\n            break;\n\n          default:\n            _this.state.tabbed && _this.setState({\n              tabbed: !1\n            });\n        }\n\n        _this.checkShortcuts(instance, key, e);\n      }, _this.loadPlugins = function () {\n        var pluginData = {};\n        (0, _terminalUtils.pluginMap)(_this.props.plugins, function (plugin) {\n          try {\n            pluginData[plugin.displayName] = plugin.defaultData;\n          } catch (e) {\n            console.error('Error loading plugin ' + plugin.displayName, e);\n          }\n        }), _this.pluginData = pluginData;\n      }, _this.getPluginMethod = function (instance, name, method) {\n        var instanceData = _this.state.instances.find(function (i) {\n          return (0, _lodash2.default)(i.instance, instance);\n        });\n\n        if (instanceData) if (instanceData.pluginMethods[name]) {\n          if (instanceData.pluginMethods[name][method]) return instanceData.pluginMethods[name][method];\n          throw new Error('No method with name ' + method + ' has been registered for plugin ' + name);\n        } else throw new Error('No plugin with name ' + name + ' has been registered');\n        return null;\n      }, _this.setCanScroll = function (instance, force) {\n        'undefined' != typeof force && instance.setState({\n          canScroll: force\n        });\n      }, _this.setScrollPosition = function (instance, pos) {\n        'number' == typeof pos && instance.setScrollPosition(pos);\n      }, _this.focusInput = function (instance) {\n        'number' == typeof pos && instance.focusInput();\n      }, _this.printLine = function (instance, inp) {\n        var std = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0,\n            print = !0;\n\n        if (std) {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          if (instanceData) for (var plugins = instanceData.pluginInstances, i = 0; i < plugins.length; i += 1) {\n            try {\n              print = plugins[i].readStdOut(inp);\n            } catch (e) {}\n          }\n        }\n\n        if (!1 !== print) {\n          var summary = instance.state.summary;\n          summary.push(inp), instance.setState({\n            summary: summary\n          });\n        }\n      }, _this.removeLine = function (instance) {\n        var lineNumber = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : -1,\n            summary = instance.state.summary;\n        summary.splice(lineNumber, 1), instance.setState({\n          summary: summary\n        });\n      }, _this.runCommand = function (instance, inputText) {\n        var force = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n            inputArray = inputText.split(' '),\n            input = inputArray[0],\n            controller = instance.state.controller,\n            commands = {};\n\n        if (!force && null !== controller) {\n          if (controller.runCommand) return controller.runCommand(inputText);\n          controller.commands && (commands = _extends({}, (0, _terminalUtils.modCommands)(controller.commands)));\n        } else {\n          var instanceData = _this.state.instances.find(function (i) {\n            return (0, _lodash2.default)(i.instance, instance);\n          });\n\n          commands = _extends({}, _this.state.commands), instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n            commands = _extends({}, commands, (0, _terminalUtils.modCommands)(i.commands));\n          });\n        }\n\n        var res,\n            command = commands[input];\n        if ('' === input) ;else if (void 0 === command) 'function' == typeof _this.props.commandPassThrough ? res = _this.props.commandPassThrough(inputArray, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance)) : _this.printLine.bind(_this, instance)('-bash:' + input + ': command not found');else {\n          var parsedArgs = command.parse(inputArray),\n              type = 'undefined' == typeof parsedArgs ? 'undefined' : _typeof(parsedArgs);\n          'object' === type && ('object' !== type || parsedArgs.help) || (res = command.method(parsedArgs, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance), !0 === command.needsInstance ? instance : void 0));\n        }\n        return 'function' == typeof _this.props.commandWasRun && _this.props.commandWasRun(inputArray, _this.printLine.bind(_this, instance), _this.runCommand.bind(_this, instance)), res;\n      }, _this.runCommandOnActive = function (inputText) {\n        var force = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n            data = _this.state.instances.find(function (i) {\n          return i.index === _this.state.activeTab;\n        });\n\n        data && null !== data.instance && _this.runCommand(data.instance, inputText, force);\n      }, _this.printToActive = function () {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var data = _this.state.instances.find(function (i) {\n          return i.index === _this.state.activeTab;\n        });\n\n        data && null !== data.instance && null === data.instance.state.controller && _this.printLine.apply(_this, [data.instance].concat(args));\n      }, _this.watchConsoleLogging = function () {\n        (0, _utils.handleLogging)('log', _this.printToActive), (0, _utils.handleLogging)('info', _this.printToActive);\n      }, _this.showHelp = function (args, printLine, runCommand, instance) {\n        var commands = _extends({}, _this.state.commands),\n            descriptions = _extends({}, _this.state.descriptions),\n            instanceData = _this.state.instances.find(function (i) {\n          return (0, _lodash2.default)(i.instance, instance);\n        });\n\n        instanceData && Object.values(instanceData.pluginInstances).forEach(function (i) {\n          commands = _extends({}, commands, i.commands), descriptions = _extends({}, descriptions, i.descriptions);\n        });\n\n        var options = Object.keys(commands),\n            _iteratorNormalCompletion = !0,\n            _didIteratorError = !1,\n            _iteratorError = void 0;\n\n        try {\n          for (var _step, option, _iterator = options[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n            option = _step.value, !1 !== descriptions[option] && printLine(option + ' - ' + descriptions[option]);\n          }\n        } catch (err) {\n          _didIteratorError = !0, _iteratorError = err;\n        } finally {\n          try {\n            !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n          } finally {\n            if (_didIteratorError) throw _iteratorError;\n          }\n        }\n      }, _this.showMsg = function (args, printLine) {\n        _this.props.msg && 0 < _this.props.msg.length && printLine(_this.props.msg);\n      }, _this.pluginData = {}, _this.defaultCommands = {\n        show: _this.showMsg,\n        clear: {\n          method: _this.clearScreen,\n          needsInstance: !0\n        },\n        help: {\n          method: _this.showHelp,\n          needsInstance: !0\n        },\n        echo: function echo(input) {\n          return input.slice(1).join(' ');\n        },\n        \"edit-line\": {\n          method: _this.editLine,\n          needsInstance: !0,\n          options: [{\n            name: 'line',\n            description: 'the line you want to edit. -1 is the last line',\n            init: function init(value) {\n              return parseInt(value, 10);\n            },\n            defaultValue: -1\n          }]\n        }\n      }, _this.defaultDesciptions = {\n        show: props.msg && 0 < props.msg.length && 'show the msg',\n        clear: 'clear the screen',\n        help: 'list all the commands',\n        echo: !1,\n        \"edit-line\": !1\n      }, _this.defaultShortcuts = {\n        \"win, linux, darwin\": {\n          \"alt + t\": _this.createTab\n        },\n        \"win, linux\": {\n          \"ctrl + l\": 'clear'\n        },\n        darwin: {\n          \"cmd + k\": 'clear'\n        }\n      }, _this.state = {\n        tabbed: !1,\n        commands: {},\n        descriptions: {},\n        show: 'closed' !== props.startState,\n        minimise: 'minimised' === props.startState,\n        maximise: 'maximised' === props.startState,\n        shortcuts: {},\n        activeTab: '',\n        tabs: [],\n        instances: []\n      }, _this;\n    }\n\n    return _inherits(Terminal, _Component), _createClass(Terminal, [{\n      key: 'getChildContext',\n      value: function value() {\n        return {\n          instances: this.state.instances,\n          show: this.state.show,\n          minimise: this.state.minimise,\n          maximise: this.state.maximise,\n          activeTab: this.state.activeTab,\n          barShowing: !this.props.hideTopBar,\n          tabsShowing: this.props.allowTabs,\n          openWindow: this.setTrue('show'),\n          closeWindow: this.setFalse('show'),\n          minimiseWindow: this.setTrue('minimise'),\n          unminimiseWindow: this.setFalse('minimise'),\n          maximiseWindow: this.setTrue('maximise'),\n          unmaximiseWindow: this.setFalse('maximise'),\n          toggleShow: this.toggleState('show'),\n          toggleMaximise: this.toggleState('maximise'),\n          toggleMinimize: this.toggleState('minimise')\n        };\n      }\n    }, {\n      key: 'render',\n      value: function value() {\n        var theme = {\n          color: this.props.color,\n          prompt: this.props.prompt,\n          barColor: this.props.barColor,\n          outputColor: this.props.outputColor,\n          backgroundColor: this.props.backgroundColor\n        };\n        return _react2.default.createElement(_styledComponents.ThemeProvider, {\n          theme: theme\n        }, _react2.default.createElement(_styledElements.Base, {\n          className: 'terminal-base',\n          fullscreen: this.state.maximise\n        }, this.getAppContent()));\n      }\n    }]), Terminal;\n  }(_react.Component), _class.displayName = 'Terminal', _class.version = '4.3.0', _class.propTypes = _types.TerminalPropTypes, _class.defaultProps = _types.TerminalDefaultProps, _class.childContextTypes = _types.TerminalContextTypes, _temp);\n\n  exports.default = Terminal;\n});","map":{"version":3,"sources":["../../../../src/js/components/Terminal/index.js"],"names":["parseInt","a","document","el","len","setTimeout","value","Terminal","displayName","version","propTypes","defaultProps","childContextTypes","show","clear","method","needsInstance","help","echo","input","options","name","description","init","defaultValue","props","darwin","tabbed","commands","descriptions","minimise","maximise","shortcuts","activeTab","tabs","instances","barShowing","tabsShowing","openWindow","closeWindow","minimiseWindow","unminimiseWindow","maximiseWindow","unmaximiseWindow","toggleShow","toggleMaximise","toggleMinimize","force","allowTabs","promptSymbol","id","args","color","style","showActions","hideTopBar","actionHandlers","height","animation","fontFamily","fontSize","data","plugin","instance","promptPrefix","prompt","history","historyCounter","inputRef","putCursorAtEnd","clean","ver","split","realSplit","checkBools","compLogic","pluginInstances","pluginMethods","old","i","api","printLine","removeLine","runCommand","setCanScroll","setScrollPosition","focusInput","setPromptPrefix","setPromptSymbol","getPluginMethod","takeControl","releaseControl","getData","PluginClass","setData","checkVersion","os","_getName","_getVersion","console","index","realIndex","insts","controller","oldPrefix","oldPrompt","keysToCheck","Object","ratings","length","full","target","rating","summary","cuts","instanceData","keyInputs","modKey","cut","shortcut","action","e","saveToHistory","res","newHistory","historyProps","key","contents","styles","marginRight","width","display","item","pluginData","defaultData","canScroll","std","print","plugins","lineNumber","inputArray","inputText","command","parsedArgs","type","commandWasRun","option","theme","barColor","outputColor","backgroundColor"],"mappings":"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","sourcesContent":["/* eslint-disable no-console, react/sort-comp */\nimport React, { Component } from 'react';\nimport stringSimilarity from 'string-similarity';\nimport whatkey from 'whatkey';\nimport isEqual from 'lodash.isequal';\nimport { ThemeProvider } from 'styled-components';\nimport { handleLogging } from '../../utils';\nimport {\n  TerminalPropTypes,\n  TerminalContextTypes,\n  TerminalDefaultProps,\n} from '../types';\n\nimport { os, pluginMap, uuidv4, getShortcuts, modCommands } from './terminal-utils';\nimport { Base, ContainerWrapper, Note } from './styled-elements';\n\nimport Bar from '../Bar';\nimport Content from '../Content/index';\nimport Tabs from '../Tabs/index';\n\nfunction compLogic(comp) {\n  switch (comp) {\n    case '>':\n      return (a, b) => parseInt(a, 10) > parseInt(b, 10);\n    case '<':\n      return (a, b) => parseInt(a, 10) < parseInt(b, 10);\n    case '>=':\n      return (a, b) => parseInt(a, 10) >= parseInt(b, 10);\n    case '<=':\n      return (a, b) => parseInt(a, 10) <= parseInt(b, 10);\n    case '!=':\n      return (a, b) => a !== b;\n    case '=':\n    default:\n      return (a, b) => a === b;\n  }\n}\n\nfunction putCursorAtEnd(el) {\n  // Only focus if input isn't already\n  if (document.activeElement !== el) {\n    el.focus();\n  }\n\n  // If this function exists... (IE 9+)\n  if (el.setSelectionRange) {\n    // Double the length because Opera is inconsistent about whether a carriage\n    // return is one character or two.\n    const len = el.value.length * 2;\n\n    // Timeout seems to be required for Blink\n    setTimeout(() => {\n      el.setSelectionRange(len, len);\n    }, 1);\n  } else {\n    // As a fallback, replace the contents with itself\n    // Doesn't work in Chrome, but Chrome supports setSelectionRange\n    el.value = el.value;\n  }\n}\n\nclass Terminal extends Component {\n  static displayName = 'Terminal';\n\n  static version = '4.3.0';\n\n  static propTypes = TerminalPropTypes;\n\n  static defaultProps = TerminalDefaultProps;\n\n  static childContextTypes = TerminalContextTypes;\n\n  constructor(props) {\n    super(props);\n\n    this.pluginData = {};\n\n    this.defaultCommands = {\n      // eslint-disable-line react/sort-comp\n      show: this.showMsg,\n      clear: {\n        method: this.clearScreen,\n        needsInstance: true,\n      },\n      help: {\n        method: this.showHelp,\n        needsInstance: true,\n      },\n      echo: input => input.slice(1).join(' '),\n      'edit-line': {\n        method: this.editLine,\n        needsInstance: true,\n        options: [\n          {\n            name: 'line',\n            description: 'the line you want to edit. -1 is the last line',\n            init: value => parseInt(value, 10),\n            defaultValue: -1,\n          },\n        ],\n      },\n    };\n\n    this.defaultDesciptions = {\n      show: (props.msg && props.msg.length > 0) ? 'show the msg' : false,\n      clear: 'clear the screen',\n      help: 'list all the commands',\n      echo: false,\n      'edit-line': false,\n    };\n\n    this.defaultShortcuts = {\n      'win, linux, darwin': {\n        'alt + t': this.createTab,\n      },\n      'win, linux': {\n        'ctrl + l': 'clear',\n      },\n      darwin: {\n        'cmd + k': 'clear',\n      },\n    };\n\n    this.state = {\n      tabbed: false,\n      commands: {},\n      descriptions: {},\n      show: props.startState !== 'closed',\n      minimise: props.startState === 'minimised',\n      maximise: props.startState === 'maximised',\n      shortcuts: {},\n      activeTab: '',\n      tabs: [],\n      instances: [],\n    };\n  }\n\n  getChildContext() {\n    return {\n      instances: this.state.instances,\n      show: this.state.show,\n      minimise: this.state.minimise,\n      maximise: this.state.maximise,\n      activeTab: this.state.activeTab,\n      barShowing: !this.props.hideTopBar,\n      tabsShowing: this.props.allowTabs,\n      openWindow: this.setTrue('show'),\n      closeWindow: this.setFalse('show'),\n      minimiseWindow: this.setTrue('minimise'),\n      unminimiseWindow: this.setFalse('minimise'),\n      maximiseWindow: this.setTrue('maximise'),\n      unmaximiseWindow: this.setFalse('maximise'),\n      toggleShow: this.toggleState('show'),\n      toggleMaximise: this.toggleState('maximise'),\n      toggleMinimize: this.toggleState('minimise'),\n    };\n  }\n\n  // Prepare the symbol\n  componentWillMount = () => {\n    this.loadPlugins();\n    this.assembleCommands();\n    this.setDescriptions();\n    this.setShortcuts();\n\n    this.createTab(true);\n  };\n\n  // Load everything!\n  componentDidMount = () => {\n    if (this.props.watchConsoleLogging) {\n      this.watchConsoleLogging();\n    }\n  };\n\n  // Tab creation\n  createTab = (force = false) => {\n    const { allowTabs, promptSymbol } = this.props;\n    if (force || allowTabs) {\n      const { tabs } = this.state;\n      const id = uuidv4();\n\n      tabs.push((\n        <Content\n          key={id}\n          id={id}\n          prompt={promptSymbol}\n          handleChange={this.handleChange}\n          handlerKeyPress={this.handlerKeyPress}\n          register={(...args) => this.registerInstance(id, ...args)}\n        />\n      ));\n\n      this.setState({ activeTab: id, tabs });\n    }\n  };\n\n  // Tab removal\n  removeTab = (index) => {\n    const { tabs } = this.state;\n    tabs.splice(index, 1);\n    this.setState({ tabs });\n  }\n\n  // Show the content on toggling\n  getAppContent = () => {\n    const { show, minimise } = this.state;\n    if (!show) {\n      return this.getNote();\n    }\n    if (minimise) {\n      return this.getBar();\n    }\n    return this.getContent();\n  };\n\n  // Shows the full window (normal window)\n  getContent = () => {\n    const {\n      color,\n      style,\n      showActions,\n      hideTopBar,\n      allowTabs,\n      actionHandlers,\n    } = this.props;\n    const { activeTab, tabs } = this.state;\n    const baseStyle = {\n      height: '100%',\n      color: color || 'green',\n      animation: 'fadeIn 0.18s ease-in',\n      fontFamily: \"'Inconsolata', monospace\",\n      fontSize: '0.9em',\n    };\n    // This should be a syled component but breaks if it is...\n    return (\n      <div style={{ ...baseStyle, ...style }}>\n        {!hideTopBar && (\n          <Bar showActions={showActions} {...actionHandlers} />\n        )}\n        {allowTabs && (\n          <Tabs\n            active={activeTab}\n            setActiveTab={this.setActiveTab}\n            createTab={this.createTab}\n            removeTab={this.removeTab}\n          />\n        )}\n        {tabs}\n      </div>\n    );\n  };\n\n  // Show only bar (minimise)\n  getBar = () => {\n    const { style, showActions, actionHandlers } = this.props;\n\n    return (\n      <ContainerWrapper style={{ ...style }}>\n        <Bar\n          showActions={showActions}\n          {...actionHandlers}\n        />\n      </ContainerWrapper>\n    );\n  };\n\n  // Show msg (on window close)\n  getNote = () => (\n    <Note>\n      <h1>\n        {this.props.closedTitle}\n      </h1>\n      <img\n        src=\"https://camo.githubusercontent.com/95ad3fffa11193f85dedbf14ca67e4c5c07182d0/687474703a2f2f69636f6e732e69636f6e617263686976652e636f6d2f69636f6e732f70616f6d656469612f736d616c6c2d6e2d666c61742f313032342f7465726d696e616c2d69636f6e2e706e67\"\n        width=\"200\"\n        height=\"200\"\n        alt=\"note\"\n        onKeyPress={this.toggleState('show')}\n        onClick={this.toggleState('show')}\n      />\n      {this.props.closedMessage}\n    </Note>\n  );\n\n  // Plugin data getter\n  getPluginData = name => this.pluginData[name];\n\n  // Plugin data setter\n  setPluginData = (name, data) => { this.pluginData[name] = data; };\n\n  // Set descriptions of the commands\n  setDescriptions = () => {\n    let descriptions = {\n      ...this.defaultDesciptions,\n      ...this.props.descriptions,\n    };\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.descriptions) {\n        descriptions = {\n          ...descriptions,\n          ...plugin.descriptions,\n        };\n      }\n    });\n    this.setState({ descriptions });\n  };\n\n  // Set command shortcuts\n  setShortcuts = () => {\n    let shortcuts = getShortcuts({}, this.defaultShortcuts);\n    shortcuts = getShortcuts(shortcuts, this.props.shortcuts);\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.shortcuts) {\n        shortcuts = getShortcuts(shortcuts, plugin.shortcuts);\n      }\n    });\n    this.setState({ shortcuts });\n  };\n\n  // Setter to change the prefix of the input prompt\n  setPromptPrefix = (instance, promptPrefix) => {\n    if (instance.state.controller === null) {\n      instance.setState({ promptPrefix });\n    }\n  };\n\n  // Setter to change the symbol of the input prompt\n  setPromptSymbol = (instance, prompt) => {\n    if (instance.state.controller === null) {\n      instance.setState({ prompt });\n    }\n  };\n\n  // Set the currently active tab\n  setActiveTab = (activeTab) => {\n    this.setState({ activeTab });\n  };\n\n  // Hide window\n  setFalse = name => () => this.setState({ [name]: false });\n\n  // Show window\n  setTrue = name => () => this.setState({ [name]: true });\n\n  /**\n   * set the input value with the possible history value\n   * @param {number} next position on the history\n   */\n  setValueWithHistory = (instance, position, inputRef) => {\n    const { history } = instance.state;\n    if (history[position]) {\n      instance.setState({ historyCounter: position });\n      inputRef.value = history[position];\n      putCursorAtEnd(inputRef);\n    }\n  };\n\n  // Method to check if version meets criteria\n  checkVersion = (comp, ver) => {\n    if (ver === '*') {\n      return true;\n    }\n    if (!(/^(\\d|\\.)+$/.test(ver))) {\n      throw new Error('Version can only have numbers and periods');\n    } else {\n      let clean = ver.toLowerCase().replace(/x/g, '0');\n      if (clean[clean.length - 1] === '.') {\n        clean += '0';\n      }\n      const split = clean.split('.');\n      while (split.length < 3) {\n        split.push('0');\n      }\n      const realSplit = Terminal.version.split('.');\n      const checkBools = split.map((val, index) => compLogic(comp)(realSplit[index], val));\n      return checkBools.indexOf(false) < 0;\n    }\n  };\n\n  // Used to keep track of all instances\n  registerInstance = (index, instance) => {\n    const { instances } = this.state;\n    const pluginInstances = {};\n    const pluginMethods = {};\n\n    const old = instances.find(i => i.index === index);\n\n    pluginMap(this.props.plugins, (PluginClass, config) => {\n      try {\n        const api = {\n          printLine: this.printLine.bind(this, instance),\n          removeLine: this.removeLine.bind(this, instance),\n          runCommand: this.runCommand.bind(this, instance),\n          setCanScroll: this.setCanScroll.bind(this, instance),\n          setScrollPosition: this.setScrollPosition.bind(this, instance),\n          focusInput: this.focusInput.bind(this, instance),\n          setPromptPrefix: this.setPromptPrefix.bind(this, instance),\n          setPromptSymbol: this.setPromptSymbol.bind(this, instance),\n          getPluginMethod: this.getPluginMethod.bind(this, instance),\n          takeControl: this.pluginTakeControl.bind(this, instance),\n          releaseControl: this.pluginReleaseControl.bind(this, instance),\n          getData: () => this.getPluginData(PluginClass.displayName),\n          setData: data => this.setPluginData(PluginClass.displayName, data),\n          checkVersion: this.checkVersion.bind(this),\n          version: Terminal.version,\n          os,\n        };\n\n        let plugin;\n        if (old) {\n          old.pluginInstances[PluginClass.displayName].updateApi(api);\n        } else {\n          plugin = new PluginClass(api, config);\n          pluginMethods[PluginClass.displayName] = {\n            ...plugin.getPublicMethods(),\n            _getName: () => PluginClass.displayName,\n            _getVersion: () => PluginClass.version,\n          };\n        }\n\n        pluginInstances[PluginClass.displayName] = plugin;\n      } catch (e) {\n        console.error(`Error instantiating plugin ${PluginClass.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n\n    const data = {\n      index,\n      instance,\n      pluginMethods: old ? old.pluginMethods : pluginMethods,\n      pluginInstances: old ? old.pluginInstances : pluginInstances,\n    };\n\n    if (old) {\n      const realIndex = instances.indexOf(old);\n      instances[realIndex] = data;\n    } else {\n      instances.push(data);\n    }\n\n    this.setState({ instances });\n\n    return () => {\n      const insts = this.state.instances;\n      this.setState({\n        instances: insts.filter(i => !isEqual(i.instance, instance)),\n      });\n    };\n  }\n\n  // allows a plugin to take full control over instance\n  pluginTakeControl = (instance, controller, newPrompt, newPromptPrefix) => {\n    const { promptPrefix, prompt } = instance.state;\n    instance.setState({\n      controller,\n      prompt: typeof newPrompt === 'undefined' ? prompt : newPrompt,\n      promptPrefix: typeof newPromptPrefix === 'undefined' ? promptPrefix : newPromptPrefix,\n      oldPrefix: promptPrefix,\n      oldPrompt: prompt,\n    });\n  };\n\n  // allows a plugin to release full control over instance\n  pluginReleaseControl = (instance) => {\n    const { oldPrefix, oldPrompt } = instance.state;\n    instance.setState({ controller: null, promptPrefix: oldPrefix, prompt: oldPrompt });\n  };\n\n  // Toggle a state boolean\n  toggleState = name => () => this.setState({ [name]: !this.state[name] });\n\n  // Prepare the built-in commands\n  assembleCommands = () => {\n    let commands = {\n      ...this.defaultCommands,\n      ...this.props.commands,\n    };\n\n    pluginMap(this.props.plugins, (plugin) => {\n      if (plugin.commands) {\n        commands = {\n          ...commands,\n          ...plugin.commands,\n        };\n      }\n    });\n\n    this.setState({ commands: modCommands(commands) });\n  };\n\n  /**\n   * autocomplete with the command the have the best match\n   * @param {object} input reference\n   */\n  autocompleteValue = (inputRef) => {\n    const { descriptions } = this.state;\n    const keysToCheck = Object.keys(descriptions).filter(key => descriptions[key] !== false);\n    let ratings = [];\n    if (inputRef.value.length > 1) {\n      ratings = stringSimilarity.findBestMatch( // eslint-disable-line\n        inputRef.value,\n        keysToCheck,\n      ).ratings;\n    } else {\n      ratings = keysToCheck.reduce((full, item) => {\n        if (item.indexOf(inputRef.value) === 0) {\n          full.push({ target: item, rating: 1 });\n        }\n        return full;\n      }, []);\n    }\n    return ratings.filter(item => item.rating > 0);\n  };\n\n  // Refresh or clear the screen\n  clearScreen = (args, printLine, runCommand, instance) => {\n    instance.setState({ summary: [] });\n  };\n\n  // Method to check for shortcut and invoking commands\n  checkShortcuts = (instance, key, e) => {\n    const { controller } = instance.state;\n    let cuts = {};\n    if (controller !== null) {\n      if (controller.shortcuts) {\n        cuts = getShortcuts(cuts, controller.shortcuts);\n      }\n    } else {\n      const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n      cuts = this.state.shortcuts;\n      if (instanceData) {\n        Object.values(instanceData.pluginInstances).forEach((i) => {\n          cuts = getShortcuts(cuts, i.shortcuts);\n        });\n      }\n    }\n\n    const shortcuts = Object.keys(cuts);\n    if (shortcuts.length > 0) {\n      const { keyInputs } = instance.state;\n      let modKey = key;\n      if (key === 'meta') {\n        // eslint-disable-next-line no-nested-ternary\n        modKey = os === 'darwin' ? 'cmd' : os === 'win' ? 'win' : 'meta';\n      }\n      keyInputs.push(modKey);\n      const len = keyInputs.length;\n\n      const options = shortcuts\n        .map((cut, i) => [cut.replace(/\\s/g, '').split('+'), i])\n        .filter(cut => cut[0].length >= keyInputs.length)\n        .filter(cut => isEqual(cut[0].slice(0, len), keyInputs));\n\n      if (options.length > 0) {\n        if (options.length === 1 && options[0][0].length === len) {\n          const shortcut = shortcuts[options[0][1]];\n          const action = cuts[shortcut];\n          if (typeof action === 'string') {\n            this.runCommand(instance, cuts[shortcut]);\n          } else if (typeof action === 'function') {\n            e.preventDefault();\n            e.stopPropagation();\n            action();\n          }\n          instance.setState({ keyInputs: [] });\n        }\n      } else if (keyInputs.length > 0) {\n        instance.setState({ keyInputs: [] });\n      }\n    }\n  };\n\n  // edit-line command\n  editLine = (args, printLine, runCommand, instance) => {\n    const { summary } = instance.state;\n    let index = args.line;\n    if (index < 0) {\n      index = summary.length === 0 ? 0 : summary.length - index;\n    }\n    summary[index] = args._.join(' ');\n    instance.setState({ summary });\n  };\n\n  // Listen for user input\n  handleChange = (instance, e) => {\n    const {\n      input, promptPrefix, prompt, history, controller,\n    } = instance.state;\n    const saveToHistory = controller !== null ? (controller.history || false) : true;\n    if (e.key === 'Enter' && !e.shiftKey) {\n      if (typeof e.dontShowCommand === 'undefined') {\n        this.printLine.bind(this, instance)(\n          `${promptPrefix}${prompt} ${e.target.value}`,\n          false,\n        );\n      }\n\n      input.push(e.target.value);\n      const res = this.runCommand(instance, `${input.join('\\n')}`);\n\n      if (typeof res !== 'undefined') {\n        this.printLine.bind(this, instance)(res);\n      }\n\n      const newHistory = [...history, e.target.value];\n      const historyProps = saveToHistory ? {\n        history: newHistory,\n        historyCounter: newHistory.length,\n      } : {};\n      instance.setState({\n        input: [],\n        ...historyProps,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    } else if (e.key === 'Enter' && e.shiftKey) {\n      this.printLine.bind(this, instance)(\n        `${promptPrefix}${prompt} ${e.target.value}`,\n        false,\n      );\n      const newHistory = [...history, e.target.value];\n      const historyProps = saveToHistory ? {\n        history: newHistory,\n        historyCounter: newHistory.length,\n      } : {};\n      instance.setState({\n        input: [...input, e.target.value],\n        ...historyProps,\n      });\n      e.target.value = ''; // eslint-disable-line no-param-reassign\n    }\n    if (typeof this.props.afterChange === 'function') {\n      this.props.afterChange(e);\n    }\n  };\n\n  /**\n   * Base of key code set the value of the input\n   * with the history\n   * @param {event} event of input\n   */\n  handlerKeyPress = (instance, e, inputRef) => {\n    const { key } = whatkey(e);\n    const { historyCounter, keyInputs, controller } = instance.state;\n    if (keyInputs.length === 0 || keyInputs.length === 0) {\n      if (controller !== null) {\n        if (controller.onKeyPress) {\n          controller.onKeyPress(key);\n        }\n      } else {\n        switch (key) {\n          case 'up':\n            this.setValueWithHistory(instance, historyCounter - 1, inputRef);\n            if (this.state.tabbed) {\n              this.setState({ tabbed: false });\n            }\n            break;\n          case 'down':\n            this.setValueWithHistory(instance, historyCounter + 1, inputRef);\n            if (this.state.tabbed) {\n              this.setState({ tabbed: false });\n            }\n            break;\n          case 'tab':\n            e.preventDefault();\n            if (inputRef.value !== '' && this.state.tabbed === true) {\n              const contents = this.autocompleteValue(inputRef);\n              this.printLine(instance, `${instance.state.promptPrefix}${instance.state.prompt} ${inputRef.value}`, false);\n              this.printLine(\n                instance,\n                (\n                  <span>\n                    {contents.filter(item => typeof item !== 'undefined').map((item) => {\n                    const styles = {\n                      marginRight: 5,\n                      width: 'calc(33% - 5px)',\n                      display: 'inline-block',\n                    };\n                    if (contents.length > 3) {\n                      styles.marginBottom = 5;\n                    }\n                    return (\n                      <span\n                        style={styles}\n                        key={`${item.target}-${item.rating}`}\n                      >\n                        {item.target}\n                      </span>\n                    );\n                  })}\n                  </span>\n                ),\n                false,\n              );\n              this.setState({ tabbed: false });\n            } else {\n              this.setState({ tabbed: true });\n            }\n            break;\n          default:\n            if (this.state.tabbed) {\n              this.setState({ tabbed: false });\n            }\n            break;\n        }\n      }\n    }\n    this.checkShortcuts(instance, key, e);\n  }\n\n  // Plugins\n  loadPlugins = () => {\n    const pluginData = {};\n    pluginMap(this.props.plugins, (plugin) => {\n      try {\n        pluginData[plugin.displayName] = plugin.defaultData;\n      } catch (e) {\n        console.error(`Error loading plugin ${plugin.displayName}`, e); // eslint-disable-line no-console\n      }\n    });\n    this.pluginData = pluginData;\n  };\n\n  // Plugin api method to get a public plugin method\n  getPluginMethod = (instance, name, method) => {\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      if (instanceData.pluginMethods[name]) {\n        if (instanceData.pluginMethods[name][method]) {\n          return instanceData.pluginMethods[name][method];\n        }\n        throw new Error(`No method with name ${method} has been registered for plugin ${name}`);\n      } else {\n        throw new Error(`No plugin with name ${name} has been registered`);\n      }\n    }\n    return null;\n  };\n\n  // Set if the current tab can scroll\n  setCanScroll = (instance, force) => {\n    if (typeof force !== 'undefined') {\n      instance.setState({ canScroll: force });\n    }\n  }\n\n  // Set the scroll position of the contents\n  setScrollPosition = (instance, pos) => {\n    if (typeof pos === 'number') {\n      instance.setScrollPosition(pos);\n    }\n  }\n\n  // Set focus to the input\n  focusInput = (instance) => {\n    if (typeof pos === 'number') {\n      instance.focusInput();\n    }\n  }\n\n  // Print the summary (input -> output)\n  printLine = (instance, inp, std = true) => {\n    let print = true;\n    if (std) {\n      const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n      if (instanceData) {\n        const plugins = instanceData.pluginInstances;\n        for (let i = 0; i < plugins.length; i += 1) {\n          try {\n            print = plugins[i].readStdOut(inp);\n          } catch (e) {\n            // Do nothing\n          }\n        }\n      }\n    }\n\n    if (print !== false) {\n      const { summary } = instance.state;\n      summary.push(inp);\n      instance.setState({ summary });\n    }\n  };\n\n  // Remove a line from the summary\n  removeLine = (instance, lineNumber = -1) => {\n    const { summary } = instance.state;\n    summary.splice(lineNumber, 1);\n    instance.setState({ summary });\n  }\n\n  // Execute the commands\n  runCommand = (instance, inputText, force = false) => {\n    const inputArray = inputText.split(' ');\n    const input = inputArray[0];\n    const args = inputArray; // Undefined for function call\n    const { controller } = instance.state;\n    let commands = {};\n    if (!force && controller !== null) {\n      if (controller.runCommand) {\n        return controller.runCommand(inputText);\n      } else if (controller.commands) {\n        commands = { ...modCommands(controller.commands) };\n      }\n    } else {\n      const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n      commands = { ...this.state.commands };\n      if (instanceData) {\n        Object.values(instanceData.pluginInstances).forEach((i) => {\n          commands = {\n            ...commands,\n            ...modCommands(i.commands),\n          };\n        });\n      }\n    }\n\n    const command = commands[input];\n    let res;\n\n    if (input === '') {\n      // do nothing\n    } else if (command === undefined) {\n      if (typeof this.props.commandPassThrough === 'function') {\n        res = this.props.commandPassThrough(\n          inputArray,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n        );\n      } else {\n        this.printLine.bind(this, instance)(`-bash:${input}: command not found`);\n      }\n    } else {\n      const parsedArgs = command.parse(args);\n      const type = typeof parsedArgs;\n      if (type !== 'object' || (type === 'object' && !parsedArgs.help)) {\n        res = command.method(\n          parsedArgs,\n          this.printLine.bind(this, instance),\n          this.runCommand.bind(this, instance),\n          command.needsInstance === true ? instance : undefined,\n        );\n      }\n    }\n    if (typeof this.props.commandWasRun === 'function') {\n      this.props.commandWasRun(\n        inputArray,\n        this.printLine.bind(this, instance),\n        this.runCommand.bind(this, instance),\n      );\n    }\n    return res;\n  };\n\n  // Run a command on the active instance\n  runCommandOnActive = (inputText, force = false) => {\n    const data = this.state.instances.find(i => i.index === this.state.activeTab);\n    if (data && data.instance !== null) {\n      this.runCommand(data.instance, inputText, force);\n    }\n  }\n\n  // Print to active instance\n  printToActive = (...args) => {\n    const data = this.state.instances.find(i => i.index === this.state.activeTab);\n    if (data && data.instance !== null && data.instance.state.controller === null) {\n      this.printLine(data.instance, ...args);\n    }\n  }\n\n  // Listen for console logging and pass the input to handler (handleLogging)\n  watchConsoleLogging = () => {\n    handleLogging('log', this.printToActive);\n    handleLogging('info', this.printToActive);\n  };\n\n  // List all the commands (state + user defined)\n  showHelp = (args, printLine, runCommand, instance) => {\n    let commands = { ...this.state.commands };\n    let descriptions = { ...this.state.descriptions };\n    const instanceData = this.state.instances.find(i => isEqual(i.instance, instance));\n    if (instanceData) {\n      Object.values(instanceData.pluginInstances).forEach((i) => {\n        commands = {\n          ...commands,\n          ...i.commands,\n        };\n        descriptions = {\n          ...descriptions,\n          ...i.descriptions,\n        };\n      });\n    }\n    const options = Object.keys(commands);\n\n    for (const option of options) {\n      // eslint-disable-line no-restricted-syntax\n      if (descriptions[option] !== false) {\n        printLine(`${option} - ${descriptions[option]}`);\n      }\n    }\n  };\n\n  // Show the msg (prop msg)\n  showMsg = (args, printLine) => {\n    if (this.props.msg && this.props.msg.length > 0) {\n      printLine(this.props.msg);\n    }\n  };\n\n  render() {\n    const theme = {\n      color: this.props.color,\n      prompt: this.props.prompt,\n      barColor: this.props.barColor,\n      outputColor: this.props.outputColor,\n      backgroundColor: this.props.backgroundColor,\n    };\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Base\n          className=\"terminal-base\"\n          fullscreen={this.state.maximise}\n        >\n          {this.getAppContent()}\n        </Base>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default Terminal;\n"]},"metadata":{},"sourceType":"script"}